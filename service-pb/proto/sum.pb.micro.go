// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sum.proto

package sum

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SumService service

func NewSumServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SumService service

type SumService interface {
	Sum(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type sumService struct {
	c    client.Client
	name string
}

func NewSumService(name string, c client.Client) SumService {
	return &sumService{
		c:    c,
		name: name,
	}
}

func (c *sumService) Sum(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SumService.Sum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SumService service

type SumServiceHandler interface {
	Sum(context.Context, *Request, *Response) error
}

func RegisterSumServiceHandler(s server.Server, hdlr SumServiceHandler, opts ...server.HandlerOption) error {
	type sumService interface {
		Sum(ctx context.Context, in *Request, out *Response) error
	}
	type SumService struct {
		sumService
	}
	h := &sumServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SumService{h}, opts...))
}

type sumServiceHandler struct {
	SumServiceHandler
}

func (h *sumServiceHandler) Sum(ctx context.Context, in *Request, out *Response) error {
	return h.SumServiceHandler.Sum(ctx, in, out)
}
